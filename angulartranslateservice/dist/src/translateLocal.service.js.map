{"version":3,"file":"translateLocal.service.js","sourceRoot":"","sources":["../../src/translateLocal.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Toolbox } from 'bdt105toolbox/dist';\nimport { Http, HttpModule } from '@angular/http';\n\n@Injectable()\nexport class TranslateLocalService {\n\n    private toolbox: Toolbox = new Toolbox(); \n    private translateData : any; \n    private currentText: string;\n    private baseurl: string;\n    private storageKey = \"translate\";\n    private fileUrl = './assets/transalte.json';\n    public data: any; \n\n    public language: string;\n\n    constructor(@Inject(Http) private http: Http){\n    }\n\n    public load(): Promise<boolean> {\n        return new Promise <boolean> ((resolve) => {\n            let trans = this.get(); \n            if (!trans){\n                setTimeout(() => {\n                    console.log('Translation loaded ?!');\n                    resolve(true);\n                }, 2000);\n            }else{\n                resolve(true);\n            }\n        });\n    }      \n\n    public get(){\n        this.data = this.toolbox.readFromStorage(this.storageKey);\n        if (this.data){\n            return this.data; \n        }\n        return null;\n    }\n\n    public translate (text: string){\n        this.currentText = text;\n        this.translateData = this.toolbox.readFromStorage(this.storageKey);\n        if (this.translateData){\n            let t = this.toolbox.filterArrayOfObjects(this.translateData, \"key\", text);\n            if (t && t.length > 0){ \n                return t[0].value;\n            }\n        }\n        return text;\n    }\n\n    public init (callbackSuccess: Function, callbackFailure: Function, fileUrl: string, storageKey: string){\n        this.fileUrl = fileUrl;\n        this.storageKey = storageKey;\n        this.http.get(this.fileUrl).subscribe(\n            (data: any) => this.manageData(callbackSuccess, data),\n            (error: any) => this.manageError(callbackFailure, error)\n        );\n    }\n\n    private manageData (callbackSuccess: Function, data: any){\n        this.toolbox.log(data);\n        this.translateData = this.toolbox.parseJson(data._body);\n        this.toolbox.writeToStorage(this.storageKey, this.translateData, false);\n        if (callbackSuccess){\n            callbackSuccess(this.data);\n        }\n    };\n\n    private manageError (callbackFailure: Function, error: any){\n        console.log(error);\n        if (callbackFailure){\n            callbackFailure(error);\n        }        \n    };\n}"]}