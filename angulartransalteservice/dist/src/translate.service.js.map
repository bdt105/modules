{"version":3,"sources":["../../src/translate.service.ts"],"names":[],"mappings":"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","file":"translate.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { DatabaseService } from 'bdt105angulardatabaseservice';\r\nimport { ConnexionService } from 'bdt105angularconnexionservice';\r\nimport { Toolbox } from 'bdt105toolbox/dist';\r\n\r\n\r\nexport class TranslateService {\r\n    translation: any[];\r\n    \r\n    private configuration = {\"translateTags\": true};\r\n    private toolbox: Toolbox = new Toolbox();\r\n    \r\n    constructor(private databaseService: DatabaseService, private connexionService: ConnexionService){\r\n        this.translation = this.toolbox.readFromStorage(\"translation\");\r\n        if (!this.translation){\r\n            let callback = function(){\r\n\r\n            }\r\n            this.loadFromDatabase(callback, callback);\r\n        }\r\n    }\r\n\r\n    public translate(text: string): string{\r\n        if (this.translation){\r\n            for (var i = 0; i < this.translation.length; i++){\r\n                if (this.translation[i].name == text){\r\n                    return this.translation[i].label;\r\n                }\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    public t(text: string){\r\n        return this.translate(text);\r\n    }\r\n\r\n    private loadFromDatabase(callBackSuccess: Function, callBackFailure: Function) {\r\n        var conn = this.connexionService.getConnexion();\r\n        if (conn){\r\n            this.databaseService.connect(conn.currentUser.login, conn.currentUser.password);\r\n            var sql = \"SELECT * FROM label where user = 'everyone' and domain = 'rest' and lang = '\" + conn.currentUser.lang + \"'\";\r\n            this.databaseService.sql(\r\n                (data: any) => this.success(callBackSuccess, data), \r\n                (data: any) => this.failure(callBackFailure, data), sql);\r\n        }\r\n    }\r\n\r\n    private success(callBackSuccess: Function, data: any){\r\n        this.translation = data.json.results;\r\n        this.toolbox.writeToStorage(\"translation\", this.translation, false);\r\n        if (callBackSuccess){\r\n            callBackSuccess(data);\r\n        }\r\n    };\r\n\r\n    private failure (callBackFailure: Function, data: any){\r\n        if (callBackFailure){\r\n            callBackFailure(data);\r\n        }\r\n    };\r\n\r\n    public getTranslateTag (){\r\n        var setting = this.toolbox.readFromStorage(\"setting\");\r\n        var translateTags = this.configuration.translateTags;\r\n        if (setting && setting.translateTags){\r\n            translateTags = setting.translateTags;\r\n        }\r\n        return translateTags;\r\n    };\r\n\r\n    refresh(callBackSuccess: Function, callBackFailure: Function){\r\n        this.loadFromDatabase(callBackSuccess, callBackFailure);\r\n    }\r\n    \r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DatabaseService, },\n{type: ConnexionService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}