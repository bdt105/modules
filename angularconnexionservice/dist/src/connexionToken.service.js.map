{"version":3,"file":"connexionToken.service.js","sourceRoot":"","sources":["../../src/connexionToken.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Toolbox } from 'bdt105toolbox/dist';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class ConnexionTokenService {\n\n    private toolbox: Toolbox = new Toolbox(); \n    private translateData : any; \n    private currentText: string;\n    private language = \"FR\";\n    private url = './assets/translate' + this.language + '.json';\n    private storageKey = \"connexion\";\n\n    public authentificationApiBaseUrl = \"\";\n\n    constructor(@Inject(Http) private http: Http){\n    }\n\n    public connect (callbackSuccess: Function, callbackFailure: Function, log: string, passwd: string, forever: boolean = false){\n        let body: any = {};\n        body.login = log;\n        body.password = passwd;\n        this.http.post(this.authentificationApiBaseUrl + \"get\", body).subscribe(\n            (data: any) => this.connexionSuccess(callbackSuccess, data, forever),\n            (error: any) => this.connexionFailure(callbackFailure, error)\n        );\n        // Fake connexion\n        // let fakeUser = this.getFakeUser();\n    }\n\n    private getFakeUser(){\n        return {\n            \"iduser\": 1,\n            \"lastName\": \"fake\",\n            \"firstName\": \"fake\"\n        }\n    }\n\n    private connexionSuccess(callback: Function, data: any, forever: boolean){\n        let dat = JSON.parse(data._body);\n        this.saveConnexion(data._body, forever);\n        if (callback){\n            callback(data._body);\n        }\n    }\n\n    private connexionFailure(callback: Function, error: any){\n        if (callback){\n            callback(error);\n        }    \n    }\n\n    public disconnect(){\n        this.removeConnexion();\n    }\n\n    public isConnected(){\n        let conn = this.get();\n        if (conn){\n            return conn.decoded != null;\n        }else{\n            return false;\n        }\n    }\n\n    public get(){\n        return this.toolbox.readFromStorage(this.storageKey);\n    }\n\n    public getToken(){\n        let conn = this.get();\n        if (conn){\n            return conn.token;\n        }\n        return null;\n    }\n\n    public saveConnexion(connexion: any, forever: boolean = false){\n        this.toolbox.writeToStorage(this.storageKey, connexion, forever);\n    }\n    \n    public removeConnexion(){\n        this.toolbox.removeFromStorage(this.storageKey);\n    }\n\n    public getUser(){\n        let conn = this.get();\n        if (conn && conn.decoded){\n            return conn.decoded;\n        }\n        return null;\n    }\n\n}"]}