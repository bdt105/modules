{"version":3,"sources":["../../src/connexion.service.ts"],"names":[],"mappings":"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","file":"connexion.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { DatabaseService } from 'bdt105angulardatabaseservice';\nimport { Toolbox } from 'bdt105toolbox/dist';\nimport { Vidal } from 'bdt105vidal/dist';\n\n\nexport class ConnexionService {\n    public connexion: any;\n    private tableName = \"user\";\n\n    public redirectUrl: string;\n\n    private toolbox: Toolbox = new Toolbox();  \n    private vidal: Vidal = new Vidal(\"dbd540aa\", \"8343650ea233a4716f524ab77dc24948\");  \n\n    constructor (private databaseService: DatabaseService){\n\n    }\n\n    connectFake(){\n        let callback = function(){\n\n        }\n        this.connect(callback, callback, \"chlux\", \"chlux\", true);\n    }\n\n    disconnect = function (){\n        this.toolbox.removeFromStorage(\"connexion\")\n        this.connexion = null;\n        return true;\n    };\n    \n    getConnexion = function(){\n        var conn = this.toolbox.readFromStorage(\"connexion\");\n        if (typeof conn == \"object\"){\n            this.connexion = conn;\n            return this.connexion;\n        } else {\n            return null;\n        }\n    };\n\n    connect (customCallBackSuccess: Function, customCallBackFailure: Function, login: string, password: string, rememberMe: boolean){\n        this.databaseService.login = login;\n        this.databaseService.password = password;\n        var where = \"email='\" + login + \"' AND password='\" + password + \"'\";\n        var body = {\"__where\": where};\n        this.databaseService.read(\n            (data: any) => this.success(customCallBackSuccess, rememberMe, data),\n            (data: any) => this.failure(customCallBackSuccess, customCallBackFailure, login, password, rememberMe, data), this.tableName, body\n        );\n    };\n\n\tchangeCurrentUserLang(lang: string){\n\t\tif (this.connexion && this.connexion.currentUser){\n\t\t\tthis.connexion.currentUser.lang = lang;\n\t\t\tthis.toolbox.writeToStorage(\"connexion\", this.connexion, false);\n\t\t}\n\t}    \n\n    private success (customCallBackSuccess: Function, rememberMe: boolean, data: any){\n        var currentUser = data.json.results[0];\n        currentUser.login = currentUser.email;\n        this.connexion = {\"currentUser\": currentUser};\n        this.toolbox.writeToStorage(\"connexion\", this.connexion, rememberMe)\n        if (customCallBackSuccess !== null){\n            customCallBackSuccess(this.connexion);\n        }\n    };\n\n    private successAfterLogin (customCallBackSuccess: Function, login: string, password: string, rememberMe: boolean, data: any){\n        var currentUser: any = {\"login\": login, \"password\": password};\n        this.connexion = {\"currentUser\": currentUser};\n        this.toolbox.writeToStorage(\"connexion\", this.connexion, rememberMe)\n        if (customCallBackSuccess !== null){\n            customCallBackSuccess(this.connexion);\n        }\n    }\n    \n    private callbackAfterAfterLogin(data: any, error: any, customCallBackSuccess: Function, login: string, password: string, rememberMe: boolean){\n        var currentUser: any = {\"login\": \"editeurs@vidal.fr\", \"password\": \"editeurs\", \"lang\": \"FR\", \"country\": \"FR\"};\n        this.connexion = {\"currentUser\": currentUser};\n        this.toolbox.writeToStorage(\"connexion\", this.connexion, rememberMe)\n        if (customCallBackSuccess !== null){\n            customCallBackSuccess(this.connexion);\n        }\n    }\n\n    private failureAfterAfterLogin(data: any, customCallBackFailure: Function){\n        this.disconnect();\n        if (customCallBackFailure !== null){\n            customCallBackFailure(data);\n        }\n    }\n\n    private failureAfterLogin (customCallBackSuccess: Function, customCallBackFailure: Function, login: string, password: string, rememberMe: boolean, data: any){\n        let params: any = [];\n        let callback = (data: any, error: any) => {\n            if (data){\n                this.callbackAfterAfterLogin(data, error, customCallBackSuccess, login, password, rememberMe);\n            }\n            if (error){\n                this.failureAfterAfterLogin(data, customCallBackFailure);\n            }\n        };\n        this.vidal.getVersion(\n            (data: any, error: any) => callback(data, error), params, \"app_id=\" + login + \"&app_key=\" + password);        \n    }\n    \n    private failure (customCallBackSuccess: Function, customCallBackFailure: Function, login: string, password: string, rememberMe: boolean, data: any){\n        this.failureAfterLogin(customCallBackSuccess, customCallBackFailure, login, password, rememberMe, data);\n    };\n   \nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DatabaseService, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}