{"version":3,"file":"connexion.service.js","sourceRoot":"","sources":["../../src/connexion.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { DatabaseService } from 'bdt105angulardatabaseservice';\nimport { Toolbox } from 'bdt105toolbox/dist';\n\n@Injectable()\nexport class ConnexionService {\n    public connexion: any;\n    private tableName = \"user\";\n\n    public redirectUrl: string;\n\n    private toolbox: Toolbox = new Toolbox();\n\n    constructor(@Inject(DatabaseService) public databaseService: DatabaseService ) {\n\n    }\n\n    public connectFake() {\n        let callback = () => {\n\n        }\n        this.connect(callback, callback, \"chlux\", \"chlux\", true);\n    }\n\n    disconnect() {\n        this.toolbox.removeFromStorage(\"connexion\")\n        this.connexion = null;\n        return true;\n    };\n\n    public get() {\n        var conn = this.toolbox.readFromStorage(\"connexion\");\n        if (typeof conn == \"object\") {\n            this.connexion = conn;\n            return this.connexion;\n        } else {\n            return null;\n        }\n    };\n\n    public save(connexion: any = null, rememberMe: boolean = false){\n        if (connexion){\n            this.connexion = connexion;\n        }\n\n        this.toolbox.writeToStorage(\"connexion\", this.connexion, rememberMe);        \n    }\n\n    public connect(customCallBackSuccess: Function, customCallBackFailure: Function, login: string, password: string, rememberMe: boolean) {\n        this.databaseService.login = login;\n        this.databaseService.password = password;\n        var where = \"email='\" + login + \"' AND password='\" + password + \"'\";\n        var body = { \"__where\": where };\n        this.databaseService.read(\n            (data: any) => this.success(customCallBackSuccess, rememberMe, data),\n            (data: any) => this.failure(customCallBackSuccess, data), this.tableName, body\n        );\n    };\n\n    public changeCurrentUserLang(lang: string) {\n        if (this.connexion && this.connexion.currentUser) {\n            this.connexion.currentUser.lang = lang;\n            this.toolbox.writeToStorage(\"connexion\", this.connexion, false);\n        }\n    }\n\n    private success(customCallBackSuccess: Function, rememberMe: boolean, data: any) {\n        var currentUser = data.json.results[0];\n        currentUser.login = currentUser.email;\n        this.connexion = { \"currentUser\": currentUser };\n        this.toolbox.writeToStorage(\"connexion\", this.connexion, rememberMe)\n        if (customCallBackSuccess !== null) {\n            customCallBackSuccess(this.connexion);\n        }\n    };\n\n    private failure(customCallBackFailure: Function, data: any) {\n        this.disconnect();\n        if (customCallBackFailure !== null) {\n            customCallBackFailure(data);\n        }\n    }\n\n    public getUser(){\n        let conn = this.get();\n        if (conn && conn.currentUser){\n            return conn.currentUser;\n        }\n        return null;\n    }    \n\n    public getCurrentUser(){\n        return this.getUser()\n    }\n\n    public isConnected(){\n        let conn = this.get();\n        return conn && conn.currentUser;\n    }\n\n}"]}