{"version":3,"file":"configuration.service.js","sourceRoot":"","sources":["../../src/configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { Http, HttpModule } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { Toolbox } from 'bdt105toolbox/dist';\n\n\n@Injectable()\nexport class ConfigurationService {\n\n    private data: any;\n    private toolbox: Toolbox = new Toolbox();\n\n    constructor (@Inject(Http) public http: Http) {\n\n    }\n\n    public get(localStorageKey: string = \"configuration\"): any {\n        return this.toolbox.readFromStorage(localStorageKey);\n    }\n\n    load(localStorageKey: string = \"configuration\", fileUrl: string = \"./assets/configuration.json\", forever: boolean = false) {\n        console.log(\"loading ...\" + localStorageKey)\n        if (!this.data){\n            this.data = [];\n        }\n        return new Promise((resolve, reject) => {\n            this.http\n                .get(fileUrl)\n                .map(res => res.json())\n                .subscribe(response => {\n                    this.data[localStorageKey] = response;\n                    this.toolbox.writeToStorage(localStorageKey, response, forever);\n                    console.log(localStorageKey + \" loading complete\", this.data)\n                    resolve(true);\n                })\n        })\n    }  \n\n    loadAutonomous(fileUrl: string = \"./assets/configuration.json\", forever: boolean = false) {\n        console.log(\"loading ...\");\n        if (!this.data){\n            this.data = [];\n        }\n        return new Promise((resolve, reject) => {\n            this.http\n                .get(fileUrl)\n                .map(res => res.json())\n                .subscribe(response => {\n                    let localStorageKey = response.common.configurationStorageKey;\n                    this.data[localStorageKey] = response;\n                    this.toolbox.writeToStorage(localStorageKey, response, forever);\n                    console.log(localStorageKey + \" loading complete\", this.data)\n                    resolve(true);\n                })\n        })\n    } \n}"]}