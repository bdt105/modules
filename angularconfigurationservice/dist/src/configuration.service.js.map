{"version":3,"file":"configuration.service.js","sourceRoot":"","sources":["../../src/configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACrC,OAAO,uBAAuB,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;;IASzC,8BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;uBAFH,IAAI,OAAO,EAAE;KAIvC;IAEM,kCAAG,GAAV,UAAW,IAAY;QACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KAC7C;IAED,mCAAI,GAAJ,UAAK,IAAY,EAAE,OAAe,EAAE,OAAgB;QAApD,iBAgBC;QAfG,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,CAAA;QACjC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACZ,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;SAClB;QACD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,KAAI,CAAC,IAAI;iBACJ,GAAG,CAAC,OAAO,CAAC;iBACZ,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,UAAA,QAAQ;gBACf,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;gBAC3B,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACrD,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,mBAAmB,EAAE,KAAI,CAAC,IAAI,CAAC,CAAA;gBAClD,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB,CAAC,CAAA;SACT,CAAC,CAAA;KACL;;gBA9BJ,UAAU;;;;gBALF,IAAI;;+BADb;;SAOa,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport { Toolbox } from 'bdt105toolbox/dist';\n\n\n@Injectable()\nexport class ConfigurationService {\n\n    private data: any;\n    private toolbox: Toolbox = new Toolbox();\n\n    constructor(private http: Http) {\n\n    }\n\n    public get(name: string): any {\n        return this.toolbox.readFromStorage(name);\n    }\n\n    load(name: string, fileUrl: string, forever: boolean) {\n        console.log(\"loading ...\" + name)\n        if (!this.data){\n            this.data = [];\n        }\n        return new Promise((resolve, reject) => {\n            this.http\n                .get(fileUrl)\n                .map(res => res.json())\n                .subscribe(response => {\n                    this.data[name] = response;\n                    this.toolbox.writeToStorage(name, response, forever);\n                    console.log(name + \" loading complete\", this.data)\n                    resolve(true);\n                })\n        })\n    }  \n}"]}