{"version":3,"file":"configuration.service.js","sourceRoot":"","sources":["../../src/configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;;IAUjC,8BAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;uBALJ,IAAI,OAAO,EAAE;mBAE1B,6BAA6B;0BACtB,eAAe;QAGhC,IAAI,QAAQ,GAAG;SAEd,CAAA;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KACjC;IAEM,mCAAI,GAAX;QAAA,iBAYC;QAXG,MAAM,CAAC,IAAI,OAAO,CAAY,UAAC,OAAO;YAClC,IAAI,IAAI,GAAG,KAAI,CAAC,GAAG,EAAE,CAAC;YACtB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAA,CAAC;gBACP,UAAU,CAAC;oBACP,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;oBAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;iBACjB,EAAE,IAAI,CAAC,CAAC;aACZ;YAAA,IAAI,CAAA,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB;SACJ,CAAC,CAAC;KACN;IAEM,kCAAG,GAAV;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;SACpB;QACD,MAAM,CAAC,IAAI,CAAC;KACf;IAEM,mCAAI,GAAX,UAAa,eAAyB,EAAE,eAAyB;QAAjE,iBAKC;QAJG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAC7B,UAAC,IAAS,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC,EAAtC,CAAsC,EACrD,UAAC,KAAU,IAAK,OAAA,KAAI,CAAC,WAAW,CAAC,eAAe,EAAE,KAAK,CAAC,EAAxC,CAAwC,CAC3D,CAAC;KACL;IAEO,yCAAU,GAAlB,UAAoB,eAAyB,EAAE,IAAS;QACpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC/D,EAAE,CAAC,CAAC,eAAe,CAAC,CAAA,CAAC;YACjB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC9B;KACJ;IAAA,CAAC;IAEM,0CAAW,GAAnB,UAAqB,eAAyB,EAAE,KAAU;QACtD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,EAAE,CAAC,CAAC,eAAe,CAAC,CAAA,CAAC;YACjB,eAAe,CAAC,KAAK,CAAC,CAAC;SAC1B;KACJ;IAAA,CAAC;;gBA1DL,UAAU;;;;gBAFF,IAAI;;+BAFb;;SAKa,oBAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Toolbox } from 'bdt105toolbox/dist';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class ConfigurationService {\n\n    private toolbox: Toolbox = new Toolbox(); \n    public data: any; \n    private url = './assets/configuration.json';\n    private storageKey = \"configuration\";\n\n    constructor (private http: Http){\n        let callback = ()=>{\n\n        }\n        this.init(callback, callback);\n    }\n\n    public load(): Promise<boolean> {\n        return new Promise <boolean> ((resolve) => {\n            let conf = this.get(); \n            if (!conf){\n                setTimeout(() => {\n                    console.log('hello world');\n                    resolve(true);\n                }, 2000);\n            }else{\n                resolve(true);\n            }\n        });\n    }    \n\n    public get(){\n        this.data = this.toolbox.readFromStorage(this.storageKey);\n        if (this.data){\n            return this.data; \n        }\n        return null;\n    }\n\n    public init (callbackSuccess: Function, callbackFailure: Function){\n        this.http.get(this.url).subscribe(\n            (data: any) => this.manageData(callbackSuccess, data),\n            (error: any) => this.manageError(callbackFailure, error)\n        );\n    }\n\n    private manageData (callbackSuccess: Function, data: any){\n        this.toolbox.log(data);\n        this.data = this.toolbox.parseJson(data._body);\n        this.toolbox.writeToStorage(this.storageKey, this.data, false);\n        if (callbackSuccess){\n            callbackSuccess(this.data);\n        }\n    };\n\n    private manageError (callbackFailure: Function, error: any){\n        console.log(error);\n        if (callbackFailure){\n            callbackFailure(error);\n        }        \n    };\n}"]}